{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MotivationalQuote","quoteArray","random","Math","floor","console","log","className","quote","author","React","Component","CreateNewTask","props","state","name","priority","dateAdded","dateDue","completed","taskArray","handleChangeName","bind","handleChangeDate","handleRemoveItem","handleSubmit","e","this","setState","target","value","obj","Date","toString","c","getAttribute","newList","filter","i","today","toISOString","slice","sortedList","concat","sort","a","b","type","onChange","placeholder","required","onClick","map","sorted","taskList","listStyle","borderBottom","width","height","padding","textDecoration","color","style","checked","task","dateadded","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc83b49e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass MotivationalQuote extends React.Component {\n\n  render() {\n    let quoteArray = [\n      {\n        \"quote\": \"Be yourself; everyone else is already taken.\",\n        \"author\": \"Oscar Wilde\",\n        \"profession\": \"Irish poet\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Advice\",\n          \"Humor\"\n        ]\n      },\n      {\n        \"quote\": \"To live is the rarest thing in the world. Most people exist, that is all.\",\n        \"author\": \"Oscar Wilde\",\n        \"profession\": \"Irish poet\",\n        \"topics\": [\n          \"Philosophy\",\n          \"Humor\"\n        ]\n      },\n      {\n        \"quote\": \"Be the change that you wish to see in the world.\",\n        \"author\": \"Mahatma Gandhi\",\n        \"profession\": \"Indian leader\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Philosophy\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"Live as if you were to die tomorrow. Learn as if you were to live forever.\",\n        \"author\": \"Mahatma Gandhi\",\n        \"profession\": \"Indian leader\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Life\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"No one can make you feel inferior without your consent.\",\n        \"author\": \"Eleanor Roosevelt\",\n        \"profession\": \"Former First Lady of the United States\",\n        \"topics\": [\n          \"Wisdom\"\n        ]\n      },\n      {\n        \"quote\": \"Great minds discuss ideas; average minds discuss events; small minds discuss people.\",\n        \"author\": \"Eleanor Roosevelt\",\n        \"profession\": \"Former First Lady of the United States\",\n        \"topics\": [\n          \"Wisdom\",\n          \"People\"\n        ]\n      },\n      {\n        \"quote\": \"Do what you feel in your heart to be right - for you'll be criticized anyway.\",\n        \"author\": \"Eleanor Roosevelt\",\n        \"profession\": \"Former First Lady of the United States\",\n        \"topics\": [\n          \"Wisdom\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"Do one thing every day that scares you.\",\n        \"author\": \"Eleanor Roosevelt\",\n        \"profession\": \"Former First Lady of the United States\",\n        \"topics\": [\n          \"Wisdom\",\n          \"Life\"\n        ]\n      },\n      {\n        \"quote\": \"Darkness cannot drive out darkness: only light can do that. Hate cannot drive out hate; only love can do that.\",\n        \"author\": \"Martin Luther King\",\n        \"profession\": \"American minister\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Wisdom\",\n          \"Love\"\n        ]\n      },\n      {\n        \"quote\": \"Our lives begin to end the day we become silent about things that matter.\",\n        \"author\": \"Martin Luther King\",\n        \"profession\": \"American minister\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Life\"\n        ]\n      },\n      {\n        \"quote\": \"In the end, we will remember not the words of our enemies, but the silence of our friends.\",\n        \"author\": \"Martin Luther King\",\n        \"profession\": \"American minister\",\n        \"topics\": [\n          \"People\",\n          \"Life\"\n        ]\n      },\n      {\n        \"quote\": \"Injustice anywhere is a threat to justice everywhere.\",\n        \"author\": \"Martin Luther King\",\n        \"profession\": \"American minister\",\n        \"topics\": [\n          \"Wisdom\"\n        ]\n      },\n      {\n        \"quote\": \"The time is always right to do what is right.\",\n        \"author\": \"Martin Luther King\",\n        \"profession\": \"American minister\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Wisdom\"\n        ]\n      },\n      {\n        \"quote\": \"Life's most persistent and urgent question is, 'What are you doing for others?\",\n        \"author\": \"Martin Luther King\",\n        \"profession\": \"American minister\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Life\",\n          \"People\"\n        ]\n      },\n      {\n        \"quote\": \"Weak people revenge. Strong people forgive. Intelligent People Ignore.\",\n        \"author\": \"Albert Einstein\",\n        \"profession\": \"Theoretical physicist\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Life\"\n        ]\n      },\n      {\n        \"quote\": \"I have not failed. I've just found 10,000 ways that won't work.\",\n        \"author\": \"Thomas A. Edison\",\n        \"profession\": \"American inventor\",\n        \"topics\": [\n          \"Inspirational\"\n        ]\n      },\n      {\n        \"quote\": \"Genius is one percent inspiration and ninety-nine percent perspiration.\",\n        \"author\": \"Thomas A. Edison\",\n        \"profession\": \"American inventor\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Wisdom\"\n        ]\n      },\n      {\n        \"quote\": \"Our greatest weakness lies in giving up. The most certain way to succeed is always to try just one more time.\",\n        \"author\": \"Thomas A. Edison\",\n        \"profession\": \"American inventor\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"If we did all the things we are capable of, we would literally astound ourselves.\",\n        \"author\": \"Thomas A. Edison\",\n        \"profession\": \"American inventor\",\n        \"topics\": [\n          \"Inspirational\"\n        ]\n      },\n      {\n        \"quote\": \"Imagination is more important than knowledge. Knowledge is limited. Imagination encircles the world.\",\n        \"author\": \"Albert Einstein\",\n        \"profession\": \"Theoretical physicist\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Wisdom\"\n        ]\n      },\n      {\n        \"quote\": \"Life isn't about finding yourself. Life is about creating yourself.\",\n        \"author\": \"George Bernard Shaw\",\n        \"profession\": \"Irish playwright\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Life\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"Success is not final, failure is not fatal: it is the courage to continue that counts.\",\n        \"author\": \"Winston Churchill\",\n        \"profession\": \"Former British Prime Minister\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Life\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"If you're going through hell, keep going.\",\n        \"author\": \"Winston Churchill\",\n        \"profession\": \"Former British Prime Minister\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"We make a living by what we get, but we make a life by what we give.\",\n        \"author\": \"Winston Churchill\",\n        \"profession\": \"Former British Prime Minister\",\n        \"topics\": [\n          \"People\",\n          \"Life\"\n        ]\n      },\n      {\n        \"quote\": \"Peace begins with a smile.\",\n        \"author\": \"Mother Teresa\",\n        \"profession\": \"Roman Catholic Saint\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Wisdom\"\n        ]\n      },\n      {\n        \"quote\": \"Spread love everywhere you go. Let no one ever come to you without leaving happier.\",\n        \"author\": \"Mother Teresa\",\n        \"profession\": \"Roman Catholic Saint\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Love\",\n          \"Advice\"\n        ]\n      },\n      {\n        \"quote\": \"If you can't feed a hundred people, then feed just one.\",\n        \"author\": \"Mother Teresa\",\n        \"profession\": \"Roman Catholic Saint\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Advice\",\n          \"People\"\n        ]\n      },\n      {\n        \"quote\": \"Kind words can be short and easy to speak, but their echoes are truly endless.\",\n        \"author\": \"Mother Teresa\",\n        \"profession\": \"Roman Catholic Saint\",\n        \"topics\": [\n          \"Inspirational\",\n          \"People\"\n        ]\n      },\n      {\n        \"quote\": \"Isn't it nice to think that tomorrow is a new day with no mistakes in it yet?\",\n        \"author\": \"L.M. Montgomery\",\n        \"profession\": \"Canadian author\",\n        \"topics\": [\n          \"Inspirational\"\n        ]\n      },\n      {\n        \"quote\": \"Tomorrow is always fresh, with no mistakes in it.\",\n        \"author\": \"L.M. Montgomery\",\n        \"profession\": \"Canadian author\",\n        \"topics\": [\n          \"Inspirational\"\n        ]\n      },\n      {\n        \"quote\": \"We should regret our mistakes and learn from them, but never carry them forward into the future with us.\",\n        \"author\": \"L.M. Montgomery\",\n        \"profession\": \"Canadian author\",\n        \"topics\": [\n          \"Inspirational\",\n          \"Advice\",\n          \"Life\"\n        ]\n      }];\n    let random = Math.floor(Math.random() * 31)\n    console.log(random)\n    return (\n      <div className=\"Quote-Holder\">\n        <p>{quoteArray[random].quote}\n          <br /> ~ {quoteArray[random].author}</p>\n      </div>\n    )\n  }\n}\n\n\nclass CreateNewTask extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      priority: '',\n      dateAdded: '',\n      dateDue: '',\n      completed: false,\n      taskArray: []\n    }\n    this.handleChangeName = this.handleChangeName.bind(this)\n    this.handleChangeDate = this.handleChangeDate.bind(this)\n    this.handleRemoveItem = this.handleRemoveItem.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChangeName(e) {\n    this.setState({\n      name: e.target.value\n    })\n\n  }\n  handleChangeDate(e) {\n    this.setState({\n      dateDue: e.target.value\n    })\n\n  }\n  handleSubmit(e) {\n    if (this.state.name !== '') {\n      const newName = this.state.name;\n      const newDateDue = this.state.dateDue;\n      const obj = {\n        name: newName,\n        dateDue: newDateDue,\n        dateAdded: (new Date().toString()),\n        completed: false\n      }\n      this.setState({ taskArray: [...this.state.taskArray, obj] })\n\n      this.setState({\n        name: \"\",\n        dateDue: \"\",\n      })\n    }\n  }\n\n  handleRemoveItem(c) {\n    const name = c.target.getAttribute(\"dateadded\")\n    const newList = this.state.taskArray.filter(i => i.dateAdded !== name)\n    this.setState({ taskArray: newList })\n\n    return console.log(newList)\n  }\n\n  render() {\n    // Sorts the task list for rendering\n    let today = new Date().toISOString().slice(0, 10)\n    const sortedList = [].concat(this.state.taskArray)\n      .sort((a, b) => a.dateDue > b.dateDue ? 1 : -1);\n    // console.log(sortedList)\n    return (\n      <div className=\"taskContainer\">\n        <div className=\"taskMaker\">\n          <input\n            type='text'\n            value={this.state.name}\n            onChange={this.handleChangeName}\n            placeholder='What do you have to do?'\n            className=\"inputTask\"\n            required\n          />\n          <p>Date Due: <input type='date' value={this.state.dateDue} onChange={this.handleChangeDate} /></p>\n\n          <button onClick={this.handleSubmit} className=\"createTask\">Create Task</button>\n        </div>\n        <div className=\"taskHolder\">\n          <h2 className=\"sectionTitle\">Today</h2>\n          {sortedList.map(sorted => {\n            let taskList = {\n              listStyle: 'none',\n              borderBottom: 'solid 1px rgb(175, 175, 175)',\n              width: '80%',\n              height: '20px',\n              padding: '5px',\n            }\n            if (sorted.completed) {\n              taskList = {\n                listStyle: 'none',\n                borderBottom: 'solid 1px rgb(175, 175, 175)',\n                width: '80%',\n                height: '20px',\n                padding: '5px',\n                textDecoration: 'line-through',\n                color: 'rgb(100, 100, 100)'\n              }\n            }\n            if (sorted.dateDue.toString() === today) {\n              return (\n                <div className=\"today\">\n                  <ul>\n                    <li key={sorted.dateAdded} style={taskList}>\n                      <input\n                        type=\"checkbox\"\n                        onChange={e => {\n                          let checked = e.target.checked;\n                          this.setState(\n                            this.state.taskArray.map(task => {\n                              if (sorted.name === task.name) {\n                                task.completed = checked\n                              }\n                              return task\n                            })\n                          )\n                        }\n                        } />\n                      {sorted.name}, Date due:{sorted.dateDue}\n                      <button type=\"button\" dateadded={sorted.dateAdded.toString()} onClick={this.handleRemoveItem}>Delete</button></li>\n                  </ul>\n                </div>\n              )\n            }\n          })}\n          <h2 className=\"sectionTitle\">Upcoming</h2>\n          {sortedList.map(sorted => {\n            let taskList = {\n              listStyle: 'none',\n              borderBottom: 'solid 1px rgb(175, 175, 175)',\n              width: '80%',\n              height: '20px',\n              padding: '5px',\n            }\n            if (sorted.completed) {\n              taskList = {\n                listStyle: 'none',\n                borderBottom: 'solid 1px rgb(175, 175, 175)',\n                width: '80%',\n                height: '20px',\n                padding: '5px',\n                textDecoration: 'line-through',\n                color: 'rgb(100, 100, 100)'\n              }\n            }\n            if (sorted.dateDue.toString() > today) {\n              return (\n                <ul>\n                  <li key={sorted.dateAdded} style={taskList}>\n                    <input\n                      type=\"checkbox\"\n                      onChange={e => {\n                        let checked = e.target.checked;\n                        this.setState(\n                          this.state.taskArray.map(task => {\n                            if (sorted.name === task.name) {\n                              task.completed = checked\n                            }\n                            return task\n                          })\n                        )\n                      }\n                      } />\n                    {sorted.name}, Date due:{sorted.dateDue}\n                    <button type=\"button\" dateadded={sorted.dateAdded.toString()} onClick={this.handleRemoveItem}>Delete</button></li>\n                </ul>\n              )\n            }\n          })}\n          <h2 className=\"sectionTitle\">Previous</h2>\n          {sortedList.map(sorted => {\n            let taskList = {\n              listStyle: 'none',\n              borderBottom: 'solid 1px rgb(175, 175, 175)',\n              width: '80%',\n              height: '20px',\n              padding: '5px',\n            }\n            if (sorted.completed) {\n              taskList = {\n                listStyle: 'none',\n                borderBottom: 'solid 1px rgb(175, 175, 175)',\n                width: '80%',\n                height: '20px',\n                padding: '5px',\n                textDecoration: 'line-through',\n                color: 'rgb(100, 100, 100)'\n              }\n            }\n            if (sorted.dateDue.toString() < today) {\n              return (\n                <div className=\"previous\">\n                  <ul>\n                    <li key={sorted.dateAdded} style={taskList}>\n                      <input\n                        type=\"checkbox\"\n                        onChange={e => {\n                          let checked = e.target.checked;\n                          this.setState(\n                            this.state.taskArray.map(task => {\n                              if (sorted.name === task.name) {\n                                task.completed = checked\n                              }\n                              return task\n                            })\n                          )\n                        }\n                        } />\n                      {sorted.name}, Date due:{sorted.dateDue}\n                      <button type=\"button\" dateadded={sorted.dateAdded.toString()} onClick={this.handleRemoveItem}>Delete</button></li>\n                  </ul>\n                </div>\n              )\n            }\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n// sort tasks based on date due, set up display so tasks are shown as \n// Today... Upcoming...\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"Page-title\"> To Do </h1>\n        <MotivationalQuote />\n        {/* <p>login (need to set up)</p> */}\n      </header>\n      <div className=\"createNewTask\">\n        <CreateNewTask />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}